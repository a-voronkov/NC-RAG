events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    server {
        listen 80;
        server_name localhost;
        
        root /usr/share/nginx/html;
        index index.html;
        
        # Health check endpoint
        location /health {
            return 200 '{"status":"ok","service":"mock-parser"}';
            add_header Content-Type application/json;
        }
        
        # Job submission endpoint
        location /jobs {
            if ($request_method = POST) {
                return 201 '{"job_id":"mock-job-$request_id","status":"queued","message":"Job submitted successfully"}';
            }
            return 405 '{"error":"Method not allowed"}';
            add_header Content-Type application/json;
        }
        
        # Job status endpoint
        location ~ ^/jobs/([^/]+)$ {
            set $job_id $1;
            return 200 '{"job_id":"$job_id","status":"processing","message":"Job is being processed"}';
            add_header Content-Type application/json;
        }
        
        # Job result endpoint
        location ~ ^/jobs/([^/]+)/result$ {
            set $job_id $1;
            return 200 '{"job_id":"$job_id","status":"completed","chunks":[{"text":"Mock parsed content","page":1}],"qa":[{"q":"What is this?","a":"Mock document"}]}';
            add_header Content-Type application/json;
        }
        
        # Default response
        location / {
            return 200 '{"service":"mock-parser","version":"1.0","endpoints":["/health","/jobs","/jobs/{id}","/jobs/{id}/result"]}';
            add_header Content-Type application/json;
        }
    }
}