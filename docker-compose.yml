services:
  traefik:
    image: traefik:v3.5
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=nc-rag_backend
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL:-admin@voronkov.club}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --api.dashboard=true
      - --accesslog=true
      - --accesslog.filepath=/var/log/traefik/access.log
      - --log.level=DEBUG
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.hsts.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.hsts.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.hsts.headers.stsPreload=true"
      # Temporary dashboard exposure for debugging
      - "traefik.http.routers.traefik.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && PathPrefix(`/traefik`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      - "traefik.http.routers.traefik.service=api@internal"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    restart: unless-stopped
    networks:
      - web
      - backend
  db:
    image: postgres:17
    container_name: nc-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloudpass}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend


  # Memcached for Nextcloud (local cache)
  memcached:
    image: memcached:1.6-alpine
    container_name: nc-memcached
    command: ["-m", "128"]
    restart: unless-stopped
    networks:
      - backend

  nextcloud:
    build:
      context: ./
      dockerfile: services/nextcloud/Dockerfile
    container_name: nextcloud
    depends_on:
      - db
      - traefik
      - redis
      - memcached
    restart: unless-stopped
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloudpass}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER:-admin}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD:-adminpass}
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_TRUSTED_DOMAINS:-ncrag.voronkov.club}
      # Memcache config (used by occ below)
      REDIS_HOST: redis
      REDIS_HOST_PORT: 6379
      MEMCACHED_HOST: memcached
      MEMCACHED_PORT: 11211
      # Webhook RabbitMQ app env (read by hook and/or app)
      NC_webhook_rabbitmq_publish_enabled: ${NC_webhook_rabbitmq_publish_enabled:-${NC_webhook_rabbitmq_enabled:-1}}
      NC_webhook_rabbitmq_host: ${NC_webhook_rabbitmq_host:-rabbitmq}
      NC_webhook_rabbitmq_port: ${NC_webhook_rabbitmq_port:-5672}
      NC_webhook_rabbitmq_user: ${NC_webhook_rabbitmq_user:-${RABBITMQ_USER:-ncrag}}
      NC_webhook_rabbitmq_pass: ${NC_webhook_rabbitmq_pass:-${RABBITMQ_PASSWORD:-ncragpass}}
      NC_webhook_rabbitmq_vhost: ${NC_webhook_rabbitmq_vhost:-${RABBITMQ_VHOST:-ncrag}}
      NC_webhook_rabbitmq_exchange: ${NC_webhook_rabbitmq_exchange:-nextcloud.events}
      NC_webhook_rabbitmq_exchange_type: ${NC_webhook_rabbitmq_exchange_type:-topic}
      NC_webhook_rabbitmq_routing_prefix: ${NC_webhook_rabbitmq_routing_prefix:-nextcloud}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.middlewares=hsts"
      - "traefik.http.routers.nextcloud.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && !PathPrefix(`/nodered`) && !PathPrefix(`/rabbitmq`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls.certresolver=le"
      - "traefik.http.routers.nextcloud.priority=100"
      - "traefik.docker.network=nc-rag_backend"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
    volumes:
      - nextcloud_data:/var/www/html
    networks:
      - backend

  nextcloud-cron:
    build:
      context: ./
      dockerfile: services/nextcloud/Dockerfile
    container_name: nextcloud-cron
    restart: unless-stopped
    depends_on:
      - db
      - nextcloud
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloudpass}
    entrypoint: /cron.sh
    volumes:
      - nextcloud_data:/var/www/html
    networks:
      - backend

  

  node-red:
    build:
      context: ./services/node-red
    container_name: node-red
    environment:
      - TZ=UTC
      - NODE_RED_ENABLE_SAFE_MODE=false
      - TENANT_DEFAULT=${TENANT_DEFAULT:-default}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-changeme}
    volumes:
      - ./services/node-red/settings.js:/data/settings.js
      - node_red_data:/data
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      # Webhooks WITHOUT authentication (highest priority)
      - "traefik.http.routers.nodered-webhook.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && PathPrefix(`/nodered/webhooks`)"
      - "traefik.http.routers.nodered-webhook.entrypoints=websecure"
      - "traefik.http.routers.nodered-webhook.priority=1000"
      - "traefik.http.routers.nodered-webhook.tls.certresolver=le"
      - "traefik.http.routers.nodered-webhook.service=nodered"
      - "traefik.http.middlewares.nodered-headers.headers.customrequestheaders.X-Forwarded-Prefix=/nodered"
      - "traefik.http.routers.nodered-webhook.middlewares=nodered-headers"
      # BROAD debug router (no Host), to capture any /nodered path
      - "traefik.http.routers.nodered-debug.rule=Path(`/nodered`) || PathPrefix(`/nodered/`)"
      - "traefik.http.routers.nodered-debug.entrypoints=websecure"
      - "traefik.http.routers.nodered-debug.priority=2000"
      - "traefik.http.routers.nodered-debug.service=nodered"
      - "traefik.http.routers.nodered-debug.middlewares=nodered-headers"
      # Node-RED UI WITHOUT Traefik auth (internal Node-RED auth)
      - "traefik.http.routers.nodered-ui.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && (Path(`/nodered`) || PathPrefix(`/nodered/`))"
      - "traefik.http.routers.nodered-ui.entrypoints=websecure"
      - "traefik.http.routers.nodered-ui.priority=900"
      - "traefik.http.routers.nodered-ui.tls.certresolver=le"
      - "traefik.http.routers.nodered-ui.service=nodered"
      - "traefik.http.routers.nodered-ui.middlewares=nodered-headers"
      # Single service for both routers
      - "traefik.http.services.nodered.loadbalancer.server.port=1880"
      - "traefik.docker.network=nc-rag_backend"
    restart: unless-stopped
    networks:
      - backend

  rabbitmq:
    build:
      context: ./
      dockerfile: services/rabbitmq/Dockerfile
    container_name: nc-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-ncrag}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-ncragpass}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-ncrag}
      RABBITMQ_APP_USER: ${RABBITMQ_APP_USER:-ncrag-app}
      : ${RABBITMQ_APP_PASS:-ncragapppass}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./configs/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    labels:
      - "traefik.enable=true"
      # Management UI with basic auth protection
      - "traefik.http.routers.rabbitmq-mgmt.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && PathPrefix(`/rabbitmq`)"
      - "traefik.http.routers.rabbitmq-mgmt.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq-mgmt.tls.certresolver=le"
      - "traefik.http.routers.rabbitmq-mgmt.middlewares=rabbitmq-slash"
      - "traefik.http.routers.rabbitmq-mgmt.priority=950"
      # Ensure trailing slash so relative assets resolve under /rabbitmq/
      - "traefik.http.middlewares.rabbitmq-slash.redirectregex.regex=^/rabbitmq$"
      - "traefik.http.middlewares.rabbitmq-slash.redirectregex.replacement=/rabbitmq/"
      - "traefik.http.middlewares.rabbitmq-slash.redirectregex.permanent=true"
      # Extra router to catch exact /rabbitmq and only redirect
      - "traefik.http.routers.rabbitmq-slash.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && Path(`/rabbitmq`)"
      - "traefik.http.routers.rabbitmq-slash.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq-slash.middlewares=rabbitmq-slash"
      - "traefik.http.routers.rabbitmq-slash.service=noop@internal"
      - "traefik.http.routers.rabbitmq-slash.tls.certresolver=le"
      - "traefik.http.routers.rabbitmq-slash.priority=951"
      # RabbitMQ Management UI will handle authentication directly
      # Basic auth middleware removed (public UI via Traefik)
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
      - "traefik.docker.network=nc-rag_backend"
    restart: unless-stopped
    networks:
      - backend

  # Redis for job state management
  redis:
    image: redis:7-alpine
    container_name: nc-redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend

  # Go Worker for file processing
  worker:
    build: ./services/worker
    container_name: nc-worker
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_APP_USER:-ncrag-app}:${RABBITMQ_APP_PASS:-ncragapppass}@rabbitmq:5672/${RABBITMQ_VHOST:-ncrag}
      - RABBITMQ_QUEUE=events.files
      - NEXTCLOUD_URL=https://${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}
      - NEXTCLOUD_USER=${NEXTCLOUD_ADMIN_USER:-admin}
      - NEXTCLOUD_PASS=${NEXTCLOUD_ADMIN_PASSWORD}
      - PARSER_URL=${PARSER_URL:-https://api.example.com/parser}
      - PARSER_SECRET=${PARSER_SECRET:-}
      - REDIS_URL=redis://redis:6379/0
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-2}
      - WORKER_PREFETCH=${WORKER_PREFETCH:-1}
    depends_on:
      - rabbitmq
      - redis
      - nextcloud
    restart: unless-stopped
    networks:
      - backend

  # Mock parser service for testing (Phase 4 development)
  mock-parser:
    image: nginx:alpine
    container_name: nc-mock-parser
    volumes:
      - ./services/mock-parser/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./services/mock-parser/html:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.parser.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && PathPrefix(`/webhooks/parser`)"
      - "traefik.http.routers.parser.entrypoints=websecure"
      - "traefik.http.routers.parser.tls.certresolver=le"
      - "traefik.http.routers.parser.priority=800"
      - "traefik.http.middlewares.parser-strip.stripprefix.prefixes=/webhooks/parser"
      - "traefik.http.routers.parser.middlewares=parser-strip"
      - "traefik.http.services.parser.loadbalancer.server.port=80"
      - "traefik.docker.network=nc-rag_backend"
    restart: unless-stopped
    networks:
      - backend

volumes:
  nextcloud_data:
  db_data:
  traefik_letsencrypt:
  node_red_data:
  rabbitmq_data:
  redis_data:

networks:
  web:
  backend:
