services:
  traefik:
    image: traefik:v3.5
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=nc-rag_backend
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL:-admin@voronkov.club}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --api.dashboard=true
      - --accesslog=true
      - --accesslog.filepath=/var/log/traefik/access.log
      - --log.level=DEBUG
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.hsts.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.hsts.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.hsts.headers.stsPreload=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    restart: unless-stopped
    networks:
      - web
      - backend
  db:
    image: postgres:17
    container_name: nc-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloudpass}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

  # Redis cache for Nextcloud
  redis:
    image: redis:7-alpine
    container_name: nc-redis
    command: ["redis-server", "--appendonly", "no"]
    restart: unless-stopped
    networks:
      - backend

  # Memcached for Nextcloud (local cache)
  memcached:
    image: memcached:1.6-alpine
    container_name: nc-memcached
    command: ["-m", "128"]
    restart: unless-stopped
    networks:
      - backend

  nextcloud:
    image: nextcloud:31-apache
    container_name: nextcloud
    depends_on:
      - db
      - traefik
      - redis
      - memcached
    restart: unless-stopped
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloudpass}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER:-admin}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD:-adminpass}
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_TRUSTED_DOMAINS:-ncrag.voronkov.club}
      # Memcache config (used by occ below)
      REDIS_HOST: redis
      REDIS_HOST_PORT: 6379
      REDIS_HOST_PASSWORD: ""
      MEMCACHED_HOST: memcached
      MEMCACHED_PORT: 11211
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.middlewares=hsts"
      - "traefik.http.routers.nextcloud.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && !PathPrefix(`/webhooks/nextcloud`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls.certresolver=le"
      - "traefik.http.routers.nextcloud.priority=100"
      - "traefik.docker.network=nc-rag_backend"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
    volumes:
      - nextcloud_data:/var/www/html
    networks:
      - backend

  nextcloud-cron:
    image: nextcloud:31-apache
    container_name: nextcloud-cron
    restart: unless-stopped
    depends_on:
      - db
      - nextcloud
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloudpass}
    entrypoint: /cron.sh
    volumes:
      - nextcloud_data:/var/www/html
    networks:
      - backend

  mock-parser:
    build:
      context: ./services/mock-parser
    container_name: mock-parser
    # internal only; exposed via backend network
    environment:
      - UVICORN_WORKERS=1
    restart: unless-stopped
    networks:
      - backend

  node-red:
    build:
      context: ./services/node-red
    container_name: node-red
    environment:
      - TZ=UTC
      - NODE_RED_ENABLE_SAFE_MODE=false
      - TENANT_DEFAULT=${TENANT_DEFAULT:-default}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-change-me}
    volumes:
      - node_red_data:/data
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nodered.rule=Host(`${NEXTCLOUD_DOMAIN:-ncrag.voronkov.club}`) && PathPrefix(`/webhooks/nextcloud`)"
      - "traefik.http.routers.nodered.entrypoints=websecure"
      - "traefik.http.routers.nodered.priority=1000"
      - "traefik.http.routers.nodered.tls.certresolver=le"
      - "traefik.http.services.nodered.loadbalancer.server.port=1880"
      - "traefik.docker.network=nc-rag_backend"
    restart: unless-stopped
    networks:
      - backend

volumes:
  nextcloud_data:
  db_data:
  traefik_letsencrypt:
  node_red_data:

networks:
  web:
  backend:

  nc-webhook-seeder:
    image: curlimages/curl:8.10.1
    container_name: nc-webhook-seeder
    depends_on:
      - nextcloud
      - traefik
    environment:
      - NC_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NC_ADMIN_PASS=${NEXTCLOUD_ADMIN_PASSWORD}
      - NC_DOMAIN=${NEXTCLOUD_DOMAIN}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    entrypoint: ["/bin/sh", "/scripts/register_webhooks.sh"]
    volumes:
      - ./scripts/register_webhooks.sh:/scripts/register_webhooks.sh:ro
    restart: "no"
    networks:
      - backend
